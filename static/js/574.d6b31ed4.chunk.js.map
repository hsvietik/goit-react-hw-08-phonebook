{"version":3,"file":"static/js/574.d6b31ed4.chunk.js","mappings":"qRAEaA,EAAaC,EAAAA,EAAAA,KAAH,wMAWVC,EAAcD,EAAAA,EAAAA,MAAH,8JASXE,EAAaF,EAAAA,EAAAA,OAAH,sMAWVG,EAAeH,EAAAA,EAAAA,EAAH,wD,sHChCZI,EAAqBC,EAAAA,KAE/BC,MAAM,CACLC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,SAAS,oBACZC,MAAOL,EAAAA,KAAaK,MAAM,iBAAiBD,SAAS,qBACpDE,SAAUN,EAAAA,KAAaI,SAAS,0BAEjCA,WAEUG,EAAcP,EAAAA,KAExBC,MAAM,CACLI,MAAOL,EAAAA,KAAaK,MAAM,iBAAiBD,SAAS,qBACpDE,SAAUN,EAAAA,KAAaI,SAAS,0BAEjCA,WAEUI,EAAmBR,EAAAA,KAE7BC,MAAM,CACLC,KAAMF,EAAAA,KAEHG,QACC,yHACA,0IAEDC,SAAS,oBACZK,OAAQT,EAAAA,KAELG,QACC,6EACA,gGAEDC,SAAS,wBAEbA,U,uMCzBI,SAASM,IAAe,IAAD,IACtBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAC7B,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CAAEjB,KAAM,GAAIO,OAAQ,IACnCW,UAAUC,EAAAA,EAAAA,GAAYb,EAAAA,MANtBc,EADF,EACEA,SACAC,EAFF,EAEEA,aACaC,EAHf,EAGEC,UAAaD,OACbE,EAJF,EAIEA,MAmBF,OACE,iCACE,UAAC,KAAD,CAAYC,SAAUJ,GAfT,SAAC,GAAsB,IAApBrB,EAAmB,EAAnBA,KAAMO,EAAa,EAAbA,OACFM,EAASa,MAAK,SAAAC,GAAO,OAAIA,EAAQ3B,OAASA,CAArB,IAEzC4B,EAAAA,GAAAA,MAAA,UAAe5B,EAAf,kDAIFS,GAASoB,EAAAA,EAAAA,IAAW,CAAE7B,KAAAA,EAAMO,OAAAA,KAC5BE,GAASqB,EAAAA,EAAAA,GAAU,KACnBN,IACAb,EAAS,YAAa,CAAEoB,SAAS,IAClC,IAIG,WACE,kBAAOC,QAAQ,OAAf,mBACA,SAAC,MAAD,kBAAiBZ,EAAS,SAA1B,IAAmCa,KAAK,OAAOC,GAAG,WAClD,SAAC,KAAD,oBAAeZ,EAAOtB,YAAtB,aAAe,EAAamC,WAC5B,kBAAOH,QAAQ,SAAf,qBACA,SAAC,MAAD,kBAAiBZ,EAAS,WAA1B,IAAqCa,KAAK,MAAMC,GAAG,aACnD,SAAC,KAAD,oBAAeZ,EAAOf,cAAtB,aAAe,EAAe4B,WAC9B,SAAC,KAAD,CAAYF,KAAK,SAAjB,6BAEF,SAAC,KAAD,MAGL,CC9CD,MATA,WACE,OACE,4BACE,+DACA,SAACzB,EAAD,MAGL,C,gFCVM,IAAMO,EAAc,SAAAqB,GAAK,OAAIA,EAAMvB,SAASwB,KAAnB,EAGnBC,EAAY,SAAAF,GAAK,OAAIA,EAAMG,MAAV,C","sources":["components/Forms/Forms.styled.jsx","helpers/validationSchema.js","components/Forms/ContactForm.jsx","pages/AddContact.jsx","redux/contacts/selectors.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const StyledForm = styled.form`\n  width: 300px;\n  display: inline-flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 30px;\n  border: solid 2px;\n  border-radius: 6px;\n  background-color: #389677;\n`;\n\nexport const StyledInput = styled.input`\n  padding: 10px;\n  border-radius: 6px;\n  background-color: #e1d5bb;\n  &:focus,\n  &:hover {\n    outline: solid 2px #c7a149;\n  }\n`;\nexport const FormButton = styled.button`\n  margin-top: 10px;\n  padding: 10px;\n  border-radius: 6px;\n  font-size: 16px;\n  background-color: #c7a149;\n  &:focus,\n  &:hover {\n    background-color: #b38f41;\n  }\n`;\nexport const ErrorMessage = styled.p`\n  margin: 0px;\n  padding: 0px;\n`;\n","import * as yup from 'yup';\nexport const registrationSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Name is required'),\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup.string().required('Password is required'),\n  })\n  .required();\n\nexport const loginSchema = yup\n  .object()\n  .shape({\n    email: yup.string().email('Invalid email').required('Email is required'),\n    password: yup.string().required('Password is required'),\n  })\n  .required();\n\nexport const contactAddSchema = yup\n  .object()\n  .shape({\n    name: yup\n      .string()\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      )\n      .required('Name is required'),\n    number: yup\n      .string()\n      .matches(\n        /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n        'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n      )\n      .required('Number is required'),\n  })\n  .required();\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useNavigate } from 'react-router-dom';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport {\n  StyledForm,\n  StyledInput,\n  FormButton,\n  ErrorMessage,\n} from './Forms.styled';\nimport { getContacts } from '../../redux/contacts/selectors.js';\nimport { addContact } from '../../redux/contacts/operations.js';\nimport { setFilter } from '../../redux/contacts/filterSlice.js';\nimport { contactAddSchema } from '../../helpers/validationSchema';\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const contacts = useSelector(getContacts);\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm({\n    defaultValues: { name: '', number: '' },\n    resolver: yupResolver(contactAddSchema),\n  });\n\n  const onSubmit = ({ name, number }) => {\n    const contactExists = contacts.find(contact => contact.name === name);\n    if (contactExists) {\n      toast.error(`${name} is already in contacts. Search in contacts.`);\n      // navigate('/contacts', { replace: true });\n      return;\n    }\n    dispatch(addContact({ name, number }));\n    dispatch(setFilter(''));\n    reset();\n    navigate('/contacts', { replace: true });\n  };\n\n  return (\n    <>\n      <StyledForm onSubmit={handleSubmit(onSubmit)}>\n        <label htmlFor=\"name\">Name</label>\n        <StyledInput {...register('name')} type=\"text\" id=\"name\" />\n        <ErrorMessage>{errors.name?.message}</ErrorMessage>\n        <label htmlFor=\"number\">Number</label>\n        <StyledInput {...register('number')} type=\"tel\" id=\"number\" />\n        <ErrorMessage>{errors.number?.message}</ErrorMessage>\n        <FormButton type=\"submit\">Add contact</FormButton>\n      </StyledForm>\n      <Toaster />\n    </>\n  );\n}\n","import React from 'react';\nimport { ContactForm } from '../components/Forms/ContactForm';\n\nfunction AddContact() {\n  return (\n    <div>\n      <h2>Add contact using the form below </h2>\n      <ContactForm />\n    </div>\n  );\n}\n\nexport default AddContact;\n","export const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contactcontactss.isLoading;\nexport const getError = state => state.tasks.error;\nexport const getFilter = state => state.filter;\n"],"names":["StyledForm","styled","StyledInput","FormButton","ErrorMessage","registrationSchema","yup","shape","name","matches","required","email","password","loginSchema","contactAddSchema","number","ContactForm","dispatch","useDispatch","navigate","useNavigate","contacts","useSelector","getContacts","useForm","defaultValues","resolver","yupResolver","register","handleSubmit","errors","formState","reset","onSubmit","find","contact","toast","addContact","setFilter","replace","htmlFor","type","id","message","state","items","getFilter","filter"],"sourceRoot":""}